SHELL := /bin/bash

sources = $(shell find -type f     \
	| grep -E '\.(go|tpl)'         \
	| grep --invert-match '_test')

#===============================================================================
#  release information
#===============================================================================
tool_dir := _tools
release_dir := _release
pkg_dest_dir := $(release_dir)/.pkg

latest_local_devel_branch := $(subst * ,,$(shell git branch --sort='-committerdate' \
	| grep --invert-match master                                                    \
	| head --lines=1))
new_tag := $(shell echo "$(latest_local_devel_branch)"  \
	| grep --only-matching -E '[0-9]+\.[0-9]+\.[0-9]+')

#===============================================================================
#  build options
#===============================================================================
package := $(shell go list)
binary := $(notdir $(package))

ALL_OS := darwin linux windows
ALL_ARCH := 386 amd64

# Version tag must be annotation tag created by `git tag -a 'x.y.z'`.
version := $(shell git describe --always --dirty 2>/dev/null || echo 'no git tag')
VERSION_PACKAGE := main
build_revision := $(shell git rev-parse --short HEAD)
build_with := $(shell go version)

static_flags := -a -tags netgo -installsuffix netgo
ld_flags := -s -w -X '$(VERSION_PACKAGE).buildVersion=$(version)' \
	-X '$(VERSION_PACKAGE).buildRevision=$(build_revision)'       \
	-X '$(VERSION_PACKAGE).buildWith=$(build_with)'               \
	-extldflags -static

#===============================================================================
#  lint options
#===============================================================================
GOMETALINTER_OPTS := --enable-all --vendored-linters --deadline=60s \
	--dupl-threshold=75 --line-length=120
GOMETALINTER_EXCLUDE_REGEX := gas|duplicate of mktpl_test.go

#===============================================================================
#  file generation from template engine
#    `mktpl` is used for generating files and data.yml is used for templating.
#    data.yml is automatically generated using upper case variables in Makefile.
#===============================================================================
BINARY := $(binary)
template_dir := $(tool_dir)/etc/template

HELP_OUT := $(binary) --help
ifneq ($(wildcard glide.yaml),)
	thanks_sed := sed --quiet 's/\\(\\s\\+\\)\\?- package: /* /p' glide.yaml
endif
THANKS_OUT := "$(thanks_sed)"

#===============================================================================
#  targets
#    `make [help]` shows tasks what you should execute.
#    The other which are not shown on help outoput are helper targets.
#===============================================================================
.DEFAULT_GOAL := help

# [Add a help target to a Makefile that will allow all targets to be self documenting]
# https://gist.github.com/prwhite/8168133
# Tweaked it to show help messages on the .PHONY line.
.PHONY: help ## show help
help:
	@echo 'USAGE: make [target]'
	@echo
	@echo 'TARGETS:'
	@grep -E '^.PHONY[^#]+##' $(MAKEFILE_LIST) \
		| sed -e 's/^.PHONY: //'               \
		| column -t -s '##'

.PHONY: setup ## install devlop tools for this project and vendor packages based on glide.lock or glide.yaml
setup: data.yml
ifeq ($(shell type -a glide 2>/dev/null),)
	curl https://glide.sh/get | sh
endif
	go get -v -u github.com/yuta-masano/mktpl
	go get -v -u github.com/alecthomas/gometalinter
	go get -v -u github.com/tcnksm/ghr
	gometalinter --install
	cp -a $(tool_dir)/etc/git_hooks/* .git/hooks/
	mkdir -p .github
	mktpl -d data.yml -t $(template_dir)/ISSUE_TEMPLATE.md > .github/ISSUE_TEMPLATE.md
	glide install --strip-vendor

# You need to do this task when you have updated or installed packages, because godoc
# reads files generated by `go install`.
.PHONY: install ## it is necessary to notify godoc when packages have been updated or installed newly
install:
ifneq ($(wildcard glide.yaml),)
	-go install $(shell sed --quiet 's/\(\s\+\)\?- package: /.\/vendor\//p' glide.yaml)
endif
	CGO_ENABLED=0 go install $(subst -a ,,$(static_flags)) -ldflags "$(ld_flags)"

.PHONY: lint ## lint go sources and check whether only LICENSE file has copyright sentence
lint: install
	gometalinter $(GOMETALINTER_OPTS)                                                  \
		$(if $(GOMETALINTER_EXCLUDE_REGEX), --exclude='$(GOMETALINTER_EXCLUDE_REGEX)') \
		$(shell glide novendor)
	$(tool_dir)/copyright_check.sh

.PHONY: test ## go test
test:
	go test -v -cover $(shell glide novendor) -coverprofile=coverage.out

.PHONY: cover ## open the result of test coverage on the browser
cover: test
	go tool cover -html=coverage.out

.PHONY: push-release-tag ## update CHANGELOG and push all of the your development works
push-release-tag: lint test readme.md
	$(tool_dir)/add_changelog.sh "$(new_tag)"
	git checkout master
	git merge --ff "$(latest_local_devel_branch)"
	git push
	$(tool_dir)/add_release_tag.sh "$(new_tag)"
	git branch --move "$(latest_local_devel_branch)" "$(latest_local_devel_branch)-pushed"

.PHONY: all-build
all-build: lint test
	$(tool_dir)/build_static_bins.sh "$(ALL_OS)" "$(ALL_ARCH)"        \
		"$(static_flags)" "$(ld_flags)" "$(pkg_dest_dir)" "$(binary)"

.PHONY: all-archive
all-archive:
	$(tool_dir)/archive.sh "$(ALL_OS)" "$(ALL_ARCH)" "$(pkg_dest_dir)"

.PHONY: release ## build binaries for all platforms and upload them to GitHub
release: all-build all-archive
	ghr "$(version)" "$(release_dir)"

.PHONY: clean ## uninstall the binary and remove non versioning files and direcotries
clean:
	go clean -i .
	rm -rf $(release_dir)
	rm coverage.out data.yml

.PHONY: readme.md ## create README.md using template
readme.md: data.yml $(template_dir)/README.md
	@mktpl -d data.yml -t $(template_dir)/README.md > README.md

# [Dumping Every Makefile Variable | CMCrossroads]
# https://www.cmcrossroads.com/article/dumping-every-makefile-variable
.PHONY: print_mktpl_vars
print_mktpl_vars:
	$(foreach V,                                         \
		$(sort $(.VARIABLES)),                           \
		$(if                                             \
			$(filter-out environment% default automatic, \
				$(origin $V)),                           \
			$(info $V: $($V))                            \
		)                                                \
	)

.PHONY: data.yml
data.yml:
	@$(MAKE) print_mktpl_vars | grep '^[A-Z]' > $@
	@sed -i -e '/^make\[[0-9]\+\]:.*/d' \
		-e 's/ *$$//'                   \
		$@
